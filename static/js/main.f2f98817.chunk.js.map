{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","index","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","res","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","console","log","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAiBeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,6BAA4BL,EAAMG,QAAQG,MAAjCN,EAAMG,QAAQC,IACvB,4BAAIJ,EAAMG,QAAQI,YCPXC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,EAASQ,GAC5B,OAAO,cAAC,EAAD,CAAMR,QAASA,GAAf,eAAqCQ,WCMrCC,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,uBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCDG,G,wDAtCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEhB,SAAUe,S,oBAG/C,WAAU,IAAD,SAC2BE,KAAKR,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YAEZQ,EAAmBlB,EAASmB,QAAO,SAACzB,GAAD,OACvCA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAIlD,OADAE,QAAQC,IAAIL,GAEV,sBAAK1B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEY,YAAY,kBACZC,aAAc,SAACmB,GAAD,OAAO,EAAKR,SAAS,CAAEN,YAAac,EAAEC,OAAOC,WAI7D,cAAC,EAAD,CAAU1B,SAAUkB,W,GAjCVS,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f2f98817.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card.styles.css\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt=\"monster\"\n      />\n      <h2 key={props.monster.id}>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card.component\";\n\nimport \"./card-list.styles.css\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster, index) => {\n        return <Card monster={monster} key={`card_${index}`} />;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange} // We can also do this => onChange={(e) => handleChange(e)}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    console.log(filteredMonsters);\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={(e) => this.setState({ searchField: e.target.value })}\n          // setState is async, If we want to make change right away when state gets changed make a callback.\n          // LIKE THIS: this.setState({ searchField: e.target.value }, () => {blah...blah...blah...})\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}